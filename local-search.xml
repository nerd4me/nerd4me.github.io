<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>程序员复式记账指南（上）</title>
    <link href="/posts/7a37cdfc.html"/>
    <url>/posts/7a37cdfc.html</url>
    
    <content type="html"><![CDATA[<p>本系列文章将分为上下两篇分别介绍 <strong>复式记账法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="在会计学中，复式记账法（又称为复式簿记 - Bookkeeping）是商业及其他组织上记录金融交易的标准系统。该系统之所以称为复式簿记，是因为每笔交易都至少记录在两个不同的账户当中。每笔交易的结果至少被记录在一个借方和一个贷方的账户，且该笔交易的借贷双方总额相等，即“有借必有贷，借贷必相等”。">[1]</span></a></sup></strong> 的基本概念以及如何使用 <strong>Beancount<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Beancount](https://github.com/beancount/beancount) 是一个开源的基于纯文本的复式记账软件。它为我们提供了一系列开箱即用的命令行工具，以及一套简洁实用且美观的 WebUI：[Fava](https://github.com/beancount/fava)">[2]</span></a></sup></strong> 记账。</p><h2 id="一、为什么要记账"><a href="#一、为什么要记账" class="headerlink" title="一、为什么要记账"></a>一、为什么要记账</h2><p>关于「为什么要记账？」，大多数人的回答无非如下几点：</p><ol><li>掌控自己的收支情况，以便更好的规划自己的理财计划；</li><li>单纯的作为一种记录，帮助自己保存记忆；</li><li>希望通过记账来改变自己的消费习惯；</li><li>觉得自己穷，希望通过记账来寻找可削减的开支；</li></ol><p>然而，在我看来，记账的功效远不止于上面所说的。记账能让我们更清晰宏观的了解自身的财务状况，并通过合理的财富资源配置（用大白话讲就是：让钱去该去的地方），帮助我们更好的应对风险，规划自己的投资行为。</p><p>一个有着良好维护的账本能够生成很多有用的账务报表，其中最有用的两个：</p><ul><li><strong>损益表（Income Statement）</strong>: 通过周期性的审阅这个报表，我们能够清楚的知道这段时间内资金的流向（用大白话讲就是：钱从哪里来？钱到哪里去了？）,以及我们的盈利&#x2F;亏损（Profit and Loss）情况（也就是收入减去支出）。</li><li><strong>资产负债表（Balance Sheet）</strong>：体现我们有多少钱，并且这些钱都分布在哪里。</li></ul><p>为了拥有一个维护良好的账本，我们需要一种更科学的记账方式。</p><h2 id="二、复式记账法-vs-图论-3"><a href="#二、复式记账法-vs-图论-3" class="headerlink" title="二、复式记账法 vs 图论[3]"></a>二、复式记账法 vs 图论<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="图论是研究事物之间关系的科学，万物之间都是有千丝万缕联系的，任何有联系（联接）的东西都可以抽象成图这种数据结构。抽象成图之后，更好做分析，比如分析哪个节点影响力最大，哪条路径最为关键，预测哪个方向会出现更多节点等等">[3]</span></a></sup></h2><p>复式记账法保证了每一条帐目，都会有至少两个账户和至少一条交易，而图这种数据结构是节点和边的集合，如果我们把节点当成账户，把交易当成一条有向边，有向边的方向表示资金的流动方向。这就是 Martin Kleppmann<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Martin Kleppmann 是剑桥大学「分布式」系统研究人员，著有 [«Designing Data-Intensive Applications»](https://book.douban.com/subject/26197294/)一书">[4]</span></a></sup> 大神在他的 <a href="https://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html">Accounting for Computer Scientists</a> 这篇文章中提出的理论，下面的章节将围绕这个理论来揭开复式记账法的神秘面纱。</p><h3 id="账户-x3D-节点，交易-x3D-有向边"><a href="#账户-x3D-节点，交易-x3D-有向边" class="headerlink" title="账户 &#x3D; 节点，交易 &#x3D; 有向边"></a>账户 &#x3D; 节点，交易 &#x3D; 有向边</h3><p>假设老王的老婆给了老王5000元的启动资金（转入银行卡），开了一个煎饼摊，买设备花了1000元（银行转账），然后还买了些做煎饼的原材料，总共花费500元（信用卡付款），最后还使用银行卡还了250元的信用卡账单。</p><p>图数据结构中的边永远是从一个节点指向其他的节点。这些节点的名称暂且随意定义（虽然在会计学中，账户的名称需要遵循一定的规则）</p><pre><code class="mermaid" >graph LR;A([启动资金]):::black -->|5,000元| B([银行卡]):::blackB -->|1,000元| C([煎饼设备]):::blackB -->|250元| D([信用卡]):::blackD -->|500元| E([食材]):::blackclassDef black fill:#FFF,stroke:#000;</code></pre><h3 id="账户余额（Balance）"><a href="#账户余额（Balance）" class="headerlink" title="账户余额（Balance）"></a>账户余额（Balance）</h3><p>图数据结构中的节点在会计学中叫做账户，每一个账户都有余额，余额完全由进出账户的交易决定</p><pre><code class="mermaid" >graph LR;A([启动资金<br>-5,000元]):::black -->|5,000元| B([银行卡<br>3,750元]):::blackB -->|1,000元| C([煎饼设备<br>1,000元]):::blackB -->|250元| D([信用卡<br>-250元]):::blackD -->|500元| E([食材<br>500元]):::blackclassDef black fill:#FFF,stroke:#000;</code></pre><p>如上图数据结构中的账户余额有两个特别有用的特性：</p><ol><li>因为每笔交易同时出现在两个不同账户，交易关联的账户余额此消彼长，所以图数据结构中所有节点之和0；</li><li>将所有节点的集合分成两个不相交的子集，分别计算两个子集的余额之和互为相反数；</li></ol><p>这两个特性对于检查账目的准确性非常有用，如果其中任何一个被违反了，就说明账目有问题。</p><h3 id="经营煎饼摊"><a href="#经营煎饼摊" class="headerlink" title="经营煎饼摊"></a>经营煎饼摊</h3><p>老王的煎饼摊生意很不错，目前靠卖煎饼总共获得了5,000元的收入，而且他发明的改良版本煎饼设备获得了专利，煎饼设备生产厂家打算先生产500台试试水，并以每台设备10元的价格购买他的专利使用权（总共5,000元），厂家先预付了2,500元。</p><p>老王把上面的图给他做会计的老婆看了下，她老婆给他讲了一堆的会计专业术语，并坚持认为「煎饼设备」的记账方式不对，她觉得应该分4年去折旧这些设备，因为在4年之内，老王完全有可能再把它们给转让出去，而且「启动资金」那里应该改成「实收资本」。</p><p>老王的朋友觉得煎饼摊的生意不错，注资了25,000元，他终于可以给自己发工资了。</p><pre><code class="mermaid" >graph LR;F([主营业务收入<br>-5,000元]):::black -->|5,000元| BG([专利收入<br>-5,000元]):::black -->|5,000元| H([工厂<br>2,500元]):::blackH -->|2,500元| BA([实收资本<br>-30,000元]):::black -->|30,000元| B([银行卡<br>28,250元]):::blackB -->|1,000元| C([煎饼设备<br>750元]):::blackB -->|8,000元| I([佣金支出<br>8,000元]):::blackB -->|250元| D([信用卡<br>-250元]):::blackD -->|500元| E([食材<br>500元]):::blackC -->|250元| J([设备折旧<br>250元]):::blackclassDef black fill:#FFF,stroke:#000;</code></pre><h3 id="财务报表"><a href="#财务报表" class="headerlink" title="财务报表"></a>财务报表</h3><p>至此，我们已经完成了整个图数据结构的构建，现在将向你展示如何通过上面的图数据结构，生成公司财报中最常用的两个报表。</p><p>先对图数据结构中的节点进行分类着色处理：</p><pre><code class="mermaid" >graph LR;F([主营业务收入<br>-5,000元]):::blue -->|5,000元| BG([专利收入<br>-5,000元]):::blue -->|5,000元| H([工厂<br>2,500元]):::greenH -->|2,500元| BA([实收资本<br>-30,000元]):::pink -->|30,000元| B([银行卡<br>28,250元]):::greenB -->|1,000元| C([煎饼设备<br>750元]):::greenB -->|8,000元| I([佣金支出<br>8,000元]):::blueB -->|250元| D([信用卡<br>-250元]):::greenD -->|500元| E([食材<br>500元]):::blueC -->|250元| J([设备折旧<br>250元]):::blueclassDef blue fill:#8AD0FC,stroke:#000;classDef pink fill:#FCB6C0,stroke:#000;classDef green fill:#A2FE97,stroke:#000;</code></pre><p>各种颜色所代表的含义（我会将对应的会计术语放到括号中，因为这些你在今后的记账中可能会遇到）：</p><ul><li><span style="color:#A2FE97"><strong>绿色</strong></span> 代表 <strong>你所拥有的东西</strong>（资产-Assets），例如：银行存款、现金，或者你已经买了且将来有可能折旧卖出的东西，比如说图中的「煎饼设备」。同时还代表公司&#x2F;个人 <strong>欠你的钱</strong>（债务人-Debtors，工厂欠你的钱），and <strong>你欠的钱</strong>（负债-Liabilities，比如说你的信用卡账单）。</li><li><span style="color:#8AD0FC"><strong>蓝色</strong></span> 代表 <strong>销售你的产品&#x2F;知识产权转让</strong>（收入-Income）和 <strong>你花出去的</strong>且永远不会再回来的钱（花费-Expenses）。「煎饼设备」是绿色，因为你可能再将它卖出，但「食材」是蓝色，因为你一旦买了，它将永远不会再回来</li><li><span style="color:#FCB6C0"><strong>粉色</strong></span> 代表 <strong>投资者给的钱</strong>（权益-Equity），通过出售煎饼摊的所有者权益。（如果你有银行贷款，它不是粉色，而是绿色，因为你欠银行的钱是需要还的）</li></ul><h3 id="损益表（Income-Statement）"><a href="#损益表（Income-Statement）" class="headerlink" title="损益表（Income Statement）"></a>损益表（Income Statement）</h3><p>通过将图数据结构中所有的蓝色节点的余额相加，我们最终得到一个值，这个值是负数代表「盈利(Profit)」，其绝对值代表这段时间内老王煎饼摊的「净利润(Net Profit)」，正数代表「亏损(Loss)」，其值代表这段时间内老王煎饼摊的「净亏损(Net Loss)」</p><p>转换成会计学中标准的格式（这里的报表为了易于理解，针对收入余额做了取绝对值处理）：</p><table style="margin: 1.5em 0">  <tbody><tr>    <th rowspan="3" style="font-variant: small-caps;">Income</th>    <td style="border-bottom: 1px solid #888;">主营业务收入</td>    <td style="border-bottom: 1px solid #888; text-align: right;">5,000元</td>  </tr>  <tr>    <td style="border-bottom: 1px solid #888;">专利收入</td>    <td style="border-bottom: 1px solid #888; text-align: right;">5,000元</td>  </tr>  <tr>    <th style="border-bottom: 1px solid #888;">Total income</th>    <th style="border-bottom: 1px solid #888; text-align: right;">10,000元</th>  </tr>  <tr style="height: 0.7em"></tr>  <tr style="margin-top: 1em">    <th rowspan="4" style="font-variant: small-caps;">Expenses</th>    <td>佣金</td>    <td style="text-align: right;">8,000元</td>  </tr>  <tr>    <td>设备折旧</td>    <td style="text-align: right;">250元</td>  </tr>  <tr>    <td style="border-bottom: 1px solid #888;">食材</td>    <td style="border-bottom: 1px solid #888; text-align: right;">500元</td>  </tr>  <tr>    <th style="border-bottom: 1px solid #888;">Total expenses</th>    <th style="border-bottom: 1px solid #888; text-align: right;">8,750元</th>  </tr>  <tr style="height: 0.7em"></tr>  <tr style="margin-top: 1em">    <th style="padding-top: 1em; font-variant: small-caps;">Total</th>    <th style="border-bottom: 1px solid #888; font-weight: bold;">Profit/Loss</th>    <th style="border-bottom: 1px solid #888; font-weight: bold; text-align: right;">1,250元</th>    <td>(= total income - total expenses)</td>  </tr></tbody></table><p>上面的表看起来很直观。老王靠销售煎饼和专利转让获得了10,000元的收入，产生的费用8,750元，所以老王煎饼摊的净利润是1,250元。</p><p>「<strong>损益表</strong>」通常是在一段时间内会计算一次（周期通常是以一个月、一个季度或者一年），如果要计算一段时间内的损益表，你需要将发生在这段时间内的交易给筛选出来，余额也仅是这段时间内的交易的累加。</p><div class="note note-warning">            <p>这里有个点需要注意一下：盈利并不能代表银行账户余额的增加，银行账户是一个绿色节点，但我们这里只统计了蓝色节点。在这个例子中，「实收资本」账户有30,000元流向「银行卡」账户，但「银行卡」账户实际余额只有28,250元，看起来银行账户的钱是减少了，因为「煎饼设备生产厂」还欠我们2,500元没有付。这也就是为什么有些公司从财务报表上看是盈利的，但还是会因为公司账上没钱而进行不下去。</p>          </div><h3 id="资产负债表（Balance-Sheet）"><a href="#资产负债表（Balance-Sheet）" class="headerlink" title="资产负债表（Balance Sheet）"></a>资产负债表（Balance Sheet）</h3><p>资产负债表虽然不如损益表直观，但它是一个非常强大的工具。你可以一目了然地看到自己有多少资产、然后这些资产分别在哪些账户里、有多少负债、是对哪些银行&#x2F;机构的负债。</p><p>还记得我们之前说过的将图中节点集合分成任意两个不相交的集合，将其各自的余额相加之后的值为0？这正是资产负债表的由来。我们取图中的所有节点，对其进行分类，绿色节点在一类，另一类是蓝色和粉色节点。所以蓝色和紫色节点的余额之和与所有绿色节点的余额之和加起来为0.</p><p>为了方便查看，我们将蓝色和粉色节点的余额做了求绝对值处理，这样在我们的资产负债表里，上下的两个值相等的：</p><table style="margin: 1.5em 0">  <tbody><tr>    <th rowspan="4" style="font-variant: small-caps;">Assets</th>    <td>银行卡</td>    <td style="text-align: right;">28,250元</td>  </tr>  <tr>    <td>债务人</td>    <td style="text-align: right;">2,500元</td>  </tr>  <tr>    <td style="border-bottom: 1px solid #888;">煎饼设备</td>    <td style="border-bottom: 1px solid #888; text-align: right;">750元</td>  </tr>  <tr>    <th style="border-bottom: 1px solid #888;">Total assets</th>    <th style="border-bottom: 1px solid #888; text-align: right;">31,500元</th>  </tr>  <tr style="height: 0.7em"></tr>  <tr style="margin-top: 1em">    <th rowspan="2" style="font-variant: small-caps;">Liabilities</th>    <td style="border-bottom: 1px solid #888;">信用卡</td>    <td style="border-bottom: 1px solid #888; text-align: right;">250元</td>  </tr>  <tr>    <th style="border-bottom: 1px solid #888;">Total liabilities</th>    <th style="border-bottom: 1px solid #888; text-align: right;">250元</th>  </tr>  <tr style="height: 0.7em"></tr>  <tr>    <th colspan="2" style="border-bottom: 1px solid #888; font-weight: bold;">Total assets less total liabilities</th>    <th style="border-bottom: 1px solid #888; font-weight: bold; text-align: right;">31,250元</th>  </tr>  <tr style="height: 0.7em"></tr>  <tr style="margin-top: 1em">    <th rowspan="3" style="padding-top: 1em; font-variant: small-caps;">Equity</th>    <td>Profit/Loss</td>    <td style="text-align: right;">1,250元</td>  </tr>  <tr>    <td style="border-bottom: 1px solid #888;">实收资本</td>    <td style="border-bottom: 1px solid #888; text-align: right;">30,000元</td>  </tr>  <tr>    <th style="border-bottom: 1px solid #888; font-weight: bold;">Total equity</th>    <th style="border-bottom: 1px solid #888; font-weight: bold; text-align: right;">31,250元</th>  </tr></tbody></table><p>上面的部分(Assets and Liabilities)代表图中的绿色节点，下面部分包含了粉色节点为和所有蓝色节点之和。我们已经在上面的损益表里展示了所有蓝色节点的余额，在资产负债表里，我们只需要将其计算出来的值填到「Profit&#x2F;Loss」这一项即可。</p><h2 id="三、Beancount"><a href="#三、Beancount" class="headerlink" title="三、Beancount"></a>三、Beancount</h2><p>千里之行，始于足下。复式记账的首要任务在于实践，在这之前，去研究很多很深的会计学概念没有任何意义。</p><h3 id="为什么使用-Beancount"><a href="#为什么使用-Beancount" class="headerlink" title="为什么使用 Beancount"></a>为什么使用 Beancount</h3><p>要开始复式记账实践，我们首先要选择一个趁手的工具。在众多工具中我强烈推荐使用 Beancount<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Beancount](https://github.com/beancount/beancount) 是一个开源的基于纯文本的复式记账软件。它为我们提供了一系列开箱即用的命令行工具，以及一套简洁实用且美观的 WebUI：[Fava](https://github.com/beancount/fava)">[2]</span></a></sup>，原因大体如下：</p><ol><li>采用改进的复式记账方案，使用简单的正负号而不是「借贷」来记录交易，对于非会计学专业的人，更易上手；</li><li>Beancount是一个开源工具，可以直接在本地运行，和其他基于云端的工具比起来，不用担心自己的账务数据泄漏；</li><li>使用纯文本文件进行账目的管理，方便存储和管理，基于 Beancount 语法生成的文件，可供人肉眼直接阅读；</li><li>提供了完整的命令行工具集和可视化工具 fava，可视化工具里提供了大部分的现成账务状况报表，也支持基于类SQL查询，生成更复杂的报表数据；</li><li>账本即是用户的输入文件，同时也是软件的「数据库」，即使现有工具不维护了，我们也可以很方便的切换成别的工具，自己只需要写一个转换程序就可以了；</li></ol><p>Beancount 是 Ledger-like<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ledger 是这一类复式记账软件的开创者，它们的共同特点是直接使用文本文件作为账本，用户直接用最喜爱的编辑器打开账本即可记账。软件只是读取你的账本文件并生成对应的报表">[5]</span></a></sup> 软件中优秀的一员，相比用 C++ 写成的 Ledger，用 Python 写成的 Beancount 更轻便，更方便增加插件和二次开发，也增加了很多功能，如灵活强大的多「货币」支持。这里为加上引号是因为，Beancount 其实并不知道什么是「货币」，它记录的只是「通货」（commodity）的变化，所有的 commodity 皆由用户自己定义，因此 Beancount 可以用来记录包括货币在内任何东西的变化，比如年假天数、股票、航空里程、信用卡积分，当然了，还可以用来数豆子。这也是 Beancount 名字的来源。</p><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>首先需要安装 <code>Python3</code> 环境，然后安装对应的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install beancount fava<br></code></pre></td></tr></table></figure><p>生成一个官方提供的示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bean-example &gt; example.beancount<br></code></pre></td></tr></table></figure><p>通过 <code>fava</code> 命令运行 WebUI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fava -H 0.0.0.0 example.beancount<br></code></pre></td></tr></table></figure><p>默认情况下Web UI会运行在 <a href="http://localhost:5000/">http://localhost:5000</a></p><p>这样就有一个基本环境了。 下一篇会进一步介绍。</p><h2 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>在会计学中，复式记账法（又称为复式簿记 - Bookkeeping）是商业及其他组织上记录金融交易的标准系统。该系统之所以称为复式簿记，是因为每笔交易都至少记录在两个不同的账户当中。每笔交易的结果至少被记录在一个借方和一个贷方的账户，且该笔交易的借贷双方总额相等，即“有借必有贷，借贷必相等”。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/beancount/beancount">Beancount</a> 是一个开源的基于纯文本的复式记账软件。它为我们提供了一系列开箱即用的命令行工具，以及一套简洁实用且美观的 WebUI：<a href="https://github.com/beancount/fava">Fava</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>图论是研究事物之间关系的科学，万物之间都是有千丝万缕联系的，任何有联系（联接）的东西都可以抽象成图这种数据结构。抽象成图之后，更好做分析，比如分析哪个节点影响力最大，哪条路径最为关键，预测哪个方向会出现更多节点等等<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>Martin Kleppmann 是剑桥大学「分布式」系统研究人员，著有 <a href="https://book.douban.com/subject/26197294/">«Designing Data-Intensive Applications»</a>一书<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>Ledger 是这一类复式记账软件的开创者，它们的共同特点是直接使用文本文件作为账本，用户直接用最喜爱的编辑器打开账本即可记账。软件只是读取你的账本文件并生成对应的报表<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>Bookkeeping</tag>
      
      <tag>Beancount</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 GitHub Pages + Hexo 搭建个人博客</title>
    <link href="/posts/d2b9b4ed.html"/>
    <url>/posts/d2b9b4ed.html</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>本博客基于 <code>Github Pages + Hexo</code>，<code>Hexo</code> 是一个快速、简单且功能强大的博客框架。支持使用 <code>Markdown</code> 写文章，<code>Hexo</code> 会在几秒内生成带有各种自定义主题、并且集成了各项功能的网站页面。</p>          </div><h3 id="零、准备工作"><a href="#零、准备工作" class="headerlink" title="零、准备工作"></a>零、准备工作</h3><h4 id="1-使用个人-GitHub-创建仓库，并配置-GitHub-Pages"><a href="#1-使用个人-GitHub-创建仓库，并配置-GitHub-Pages" class="headerlink" title="1. 使用个人 GitHub 创建仓库，并配置 GitHub Pages"></a>1. 使用个人 <a href="https://github.com/">GitHub</a> 创建仓库，并配置 <code>GitHub Pages</code></h4><div class="note note-info">            <p><strong>注意:</strong><br>此仓库用于存放我们的博客页面，仓库名必须使用：<code>&lt;GitHub用户名&gt;.github.io</code> 格式，比如本博客对应的仓库名就是: <code>nerd4me.github.io</code></p>          </div><p>仓库创建好之后，我们可以在仓库根路径下创建一个名为 <code>index.html</code> 的静态 <code>HTML</code> 文件来验证我们的网站是否搭建成功</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Nerd4me&#x27;s Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, Blog World ~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <code>nerd4me.github.io</code> 仓库对应的 <code>GitHub Pages</code> 设置页面 (访问路径：<code>Settings -&gt; Pages</code>) 可以找到我们的主页访问地址：<a href="https://nerd4me.github.io/">https://nerd4me.github.io</a>，在浏览器中访问该地址，能正常访问表示我们的 <code>GitHub Pages</code> 搭建成功。</p><h4 id="2-安装-Git-和-NodeJS"><a href="#2-安装-Git-和-NodeJS" class="headerlink" title="2. 安装 Git 和 NodeJS"></a>2. 安装 <code>Git</code> 和 <code>NodeJS</code></h4><p><code>Hexo</code> 是基于 <code>NodeJS</code> 编写的，在开始之前我们需要先安装 <code>NodeJS</code> 和 <code>npm</code> 工具。具体可以网上自己找教程或者参考我如下的步骤</p><p>我的本地环境是 <code>Windows 11 + PowerShell</code>，包管理工具使用的是 <a href="https://scoop.sh/">Scoop</a>，<code>NodeJS</code> 通过 <code>nvm</code> 来管理，如下安装步骤需要在 <code>PowerShell</code> 里执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop install git <span class="hljs-comment"># 安装Git</span><br><br>scoop install nvm <span class="hljs-comment"># 安装 nvm</span><br>nvm list available <span class="hljs-comment"># 查看可用的 NodeJS 版本，这里建议使用 LTS 版本</span><br>nvm install <span class="hljs-number">16.18</span>.<span class="hljs-number">0</span> <span class="hljs-comment"># 安装 NodeJS，我这里安装的是最新 LTS 版本 16.18.0</span><br>sudo nvm use <span class="hljs-number">16.18</span>.<span class="hljs-number">0</span> <span class="hljs-comment"># NodeJS 版本使用 16.18.0，注意这里需要管理员权限，可以先使用 scoop 安装 sudo 这个工具</span><br></code></pre></td></tr></table></figure><h3 id="一、安装-Hexo"><a href="#一、安装-Hexo" class="headerlink" title="一、安装 Hexo"></a>一、安装 <code>Hexo</code></h3><div class="note note-info">            <p>此处只列出本博客所需的关键步骤，更多说明详见官方文档：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>          </div><h4 id="1-全局安装-hexo-cli-工具"><a href="#1-全局安装-hexo-cli-工具" class="headerlink" title="1. 全局安装 hexo-cli 工具"></a>1. 全局安装 <code>hexo-cli</code> 工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br><br>hexo -v <span class="hljs-comment"># 查看版本，目前最新版本为 4.3.0</span><br></code></pre></td></tr></table></figure><h4 id="2-创建一个项目-my-blog-并初始化"><a href="#2-创建一个项目-my-blog-并初始化" class="headerlink" title="2. 创建一个项目 my-blog 并初始化"></a>2. 创建一个项目 <code>my-blog</code> 并初始化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init my-blog<br><span class="hljs-built_in">cd</span> my-blog<br>npm install<br></code></pre></td></tr></table></figure><h4 id="3-生成网页文件-amp-本地启动"><a href="#3-生成网页文件-amp-本地启动" class="headerlink" title="3. 生成网页文件 &amp; 本地启动"></a>3. 生成网页文件 &amp; 本地启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate <span class="hljs-comment"># 生成页面，此命令可以简写为 `hexo g`</span><br>hexo server <span class="hljs-comment"># 本地启动，可简写为 `hexo s`</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>通过 <code>hexo g</code> 生成的页面文件在项目 <code>public</code> 目录下，通过 <code>hexo clean</code> 命令可以清理生成的页面文件，当我们的配置未生效时，建议执行下清理命令</p>          </div><h4 id="4-本地访问"><a href="#4-本地访问" class="headerlink" title="4. 本地访问"></a>4. 本地访问</h4><p>通过浏览器访问：<a href="http://localhost:4000/">http://localhost:4000/</a>  可以看到一个比较简陋的页面，没关系，下一章节我们将介绍如何更换主题</p><h3 id="二、安装-amp-配置主题"><a href="#二、安装-amp-配置主题" class="headerlink" title="二、安装&amp;配置主题"></a>二、安装&amp;配置主题</h3><p>通过上面章节所介绍的步骤，我们已经能够通过本地访问博客页面了，但 <code>Hexo</code> 默认的主题不太好看，好在官方提供了数百种主题供我们选择，可以根据个人喜好更换，具体可以点击 <a href="https://hexo.io/themes/">这里</a> 查看，本博客使用的是 <a href="https://fluid-dev.github.io/hexo-fluid-docs/">Fluid</a> 主题，这里仅介绍此主题的安装与配置。</p><h4 id="1-安装-Fluid-主题"><a href="#1-安装-Fluid-主题" class="headerlink" title="1. 安装 Fluid 主题"></a>1. 安装 <a href="https://fluid-dev.github.io/hexo-fluid-docs/">Fluid</a> 主题</h4><p>官方提供了两种 <a href="https://fluid-dev.github.io/hexo-fluid-docs/start/#%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC">安装方式</a>，这里使用官方推荐的 <code>npm</code> 方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客根路径下创建 <code>_config.fluid.yml</code> 文件，并将主题的 <code>./node_modules/hexo-theme-fluid/_config.yml</code> 文件内容复制过去</p><h4 id="2-指定主题"><a href="#2-指定主题" class="headerlink" title="2. 指定主题"></a>2. 指定主题</h4><p>将如下修改应用到 <code>Hexo</code> 博客目录中的 <code>_config.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h4 id="3-创建「关于页」"><a href="#3-创建「关于页」" class="headerlink" title="3. 创建「关于页」"></a>3. 创建「关于页」</h4><p>首次使用主题的「关于页」需要手动创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 layout 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><strong>WARNING</strong><br><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p>          </div><h4 id="4-更新-Fluid-主题"><a href="#4-更新-Fluid-主题" class="headerlink" title="4. 更新 Fluid 主题"></a>4. 更新 <code>Fluid</code> 主题</h4><div class="note note-warning">            <p>适用于通过 <code>npm</code> 安装主题</p>          </div><p>在博客目录下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm update --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><h4 id="5-本地启动"><a href="#5-本地启动" class="headerlink" title="5. 本地启动"></a>5. 本地启动</h4><p>执行如下命令重新生成页面，并启动 <code>Hexo</code> 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> , 可以看到页面变得漂亮多了</p><h3 id="三、创建文章"><a href="#三、创建文章" class="headerlink" title="三、创建文章"></a>三、创建文章</h3><p>修改 <code>_config.yml</code> 文件，这项配置是为了在生成文章的时候同时生成一个同名的资源目录用于存放图片等资源文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>创建文件名为 <code>my-blog-build-remark</code> 文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post my-blog-build-remark<br></code></pre></td></tr></table></figure><p>设置文章的标题及其他元数据信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">基于</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span> <span class="hljs-string">+</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">搭建个人博客</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-10-16 19:42:53</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">&#x27;hexo&#x27;</span>,<span class="hljs-string">&#x27;fluid&#x27;</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>如上命令执行成功后，在 <code>source/_posts/</code> 目录下生成了一个 <code>Markdown</code> 文件和一个同名的资源目录</p><p>在 <code>source/_posts/my-blog-build-remark</code> 目录中放置一个图片文件 <code>posts-file-tree.png</code>，整体目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span>/_posts (main)&gt; tree</span><br>.<br>├── hello-world.md<br>├── my-blog-build-remark<br>│   └── posts-file-tree.png<br>└── my-blog-build-remark.md<br></code></pre></td></tr></table></figure><p>然后在文章的 <code>Markdown</code> 文件里通过如下方式即可引用对应的图片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% asset<span class="hljs-emphasis">_img posts-file-tree.png 目录结构 %&#125;</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>关于图片的引用方式，不只有这一种，具体可参考官方文档 <a href="https://hexo.io/zh-cn/docs/asset-folders.html">https://hexo.io/zh-cn/docs/asset-folders.html</a> ，里边有非常详细的介绍</p>          </div><p>文章创建并编辑好之后，就可以通过 <code>hexo g &amp;&amp; hexo s</code> 命令来启动服务并在本地预览文章</p><h3 id="四、配置指南"><a href="#四、配置指南" class="headerlink" title="四、配置指南"></a>四、配置指南</h3><div class="note note-success">            <p>如无特殊说明，如下配置文件一律默认为<strong>主题配置</strong>文件：<code>_config.fluid.yml</code> </p>          </div><h4 id="1-页面-title-修改"><a href="#1-页面-title-修改" class="headerlink" title="1. 页面 title 修改"></a>1. 页面 title 修改</h4><p>修改 <code>_config.yml</code> 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">Nerd4me&#x27;s</span> <span class="hljs-string">Blog</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">nerd4me</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="2-博客标题"><a href="#2-博客标题" class="headerlink" title="2. 博客标题"></a>2. 博客标题</h4><p>页面左上角的博客标题，默认使用<strong>站点配置(_config.yml)<strong>中的 <code>title</code>，这个配置同时控制着网页在浏览器标签中的标题。<br>如需单独区别设置，可在</strong>主题配置</strong>中设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;Nerd4me&#x27;s Blog&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-首页-Slogan-打字机"><a href="#3-首页-Slogan-打字机" class="headerlink" title="3. 首页 - Slogan(打字机)"></a>3. 首页 - Slogan(打字机)</h4><p>首页大图中的标题文字，可在<strong>主题配置</strong>中设定是否开启，这里支持配置固定的 <code>text</code> 或者从远程 <code>api</code> 实时获取，优先级 <code>api &gt; text</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;求知若饥，虚心若愚。&quot;</span><br>    <span class="hljs-attr">api:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br>      <span class="hljs-attr">keys:</span> [<span class="hljs-string">&quot;hitokoto&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="五、网页访问统计"><a href="#五、网页访问统计" class="headerlink" title="五、网页访问统计"></a>五、网页访问统计</h3><p>目前 <code>Fluid</code> 支持多种统计网站，这里只介绍 <code>LeanCloud</code> 的配置，使用 <code>LeanCloud</code> 之前，需要先注册账户，具体请访问其 <a href="https://www.leancloud.cn/">官网</a> 完成账户注册，并新建应用（需实名认证），在 <code>控制台 -&gt; 应用 -&gt; 设置 -&gt; 应用凭证</code> 页面中找到对应的 <code>AppID</code>、<code>AppKey</code>、<code>REST API 服务器地址</code> 等信息填入 <strong>主题配置</strong> 中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span> <span class="hljs-comment"># AppID</span><br>    <span class="hljs-attr">app_key:</span> <span class="hljs-comment"># AppKey</span><br>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span><br>    <span class="hljs-attr">server_url:</span> <span class="hljs-comment"># REST API 服务器地址</span><br><br>    <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span><br>    <span class="hljs-comment"># If true, ignore localhost &amp; 127.0.0.1</span><br>    <span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>如无特殊需要，记得配置 <code>ignore_local: true</code>，这样 LeanCloud 在 localhost 域名下访问不会增加数据</p>          </div><h4 id="1-展示-PV-与-UV-统计"><a href="#1-展示-PV-与-UV-统计" class="headerlink" title="1. 展示 PV 与 UV 统计"></a>1. 展示 PV 与 UV 统计</h4><p>页脚可以展示 PV 与 UV 统计数据，目前支持两种数据来源：<code>LeanCloud</code> 与 <code>不蒜子</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-展示文章日期-x2F-字数-x2F-阅读时长-x2F-阅读数"><a href="#2-展示文章日期-x2F-字数-x2F-阅读时长-x2F-阅读数" class="headerlink" title="2. 展示文章日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数"></a>2. 展示文章日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-attr">author:</span> <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL a&quot;</span> <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化 See: http://momentjs.cn/docs/#/parsing/string-format/</span><br>    <span class="hljs-attr">wordcount:</span> <span class="hljs-comment"># 字数统计</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span><br>    <span class="hljs-attr">min2read:</span> <span class="hljs-comment"># 估计阅读全文需要的时长</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">awl:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">wpm:</span> <span class="hljs-number">60</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br>    <span class="hljs-attr">views:</span> <span class="hljs-comment"># 浏览量计数</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-文章评论功能"><a href="#3-文章评论功能" class="headerlink" title="3. 文章评论功能"></a>3. 文章评论功能</h4><p>开启评论需要在<strong>主题配置</strong>中开启并指定评论插件，这里使用基于 <code>LeanCloud</code> 的 <code>Valine</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br><br><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># 基于 LeanCloud</span><br><span class="hljs-comment"># See: https://valine.js.org/</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appId:</span> <span class="hljs-comment"># LeanCloud AppID</span><br>  <span class="hljs-attr">appKey:</span> <span class="hljs-comment"># LeanCloud AppKey</span><br></code></pre></td></tr></table></figure><h3 id="六、发布-GitHub-Pages"><a href="#六、发布-GitHub-Pages" class="headerlink" title="六、发布 GitHub Pages"></a>六、发布 GitHub Pages</h3><p>安装 <code>hexo-deployer-git</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改站点配置 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span> <span class="hljs-comment"># https://github.com/nerd4me/nerd4me.github.io.git</span><br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]<br>  <span class="hljs-attr">token:</span> [<span class="hljs-string">token</span>]<br></code></pre></td></tr></table></figure><p>生成站点文件并推送至远程 <code>GitHub</code> 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo deploy<br></code></pre></td></tr></table></figure><p>登入 <code>Github</code>，请在库设置（Repository Settings）中将默认分支设置为 <code>_config.yml</code> 配置中的分支名称。稍等片刻，您的站点就会显示在您的Github Pages中。</p><h3 id="七、参考资料"><a href="#七、参考资料" class="headerlink" title="七、参考资料"></a>七、参考资料</h3><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo Docs</a></li><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/">Hexo Fluid 用户手册</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
